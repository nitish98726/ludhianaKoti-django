installed git created user and email of git
git config --global user.name "John Doe" - Nitish
git config --global user.email johndoe@example.com - rockybranilla@gmail.com
github.com - nitish98726@gmail.com password - see amazon pass

created a virtual environement named env -> python -m venv <'name_of_env'>
env\Scripts\activate - to activate the virtual environment

started a new project ludhianaKoti

now in seetings.py there is TEMPLATES dictionary here you can specify from where you want to load templates .

now static files such as images javascript ,css files copied into static folder and then in settings.py
STATIC_ROOT = BASE_DIR /'static'
STATICFILES_DIRS = ['ludhianaKoti/static',]

now in cmd run python manage.py collectstatic - this will create a similar folder static with all the files and one admin folder

now you can use all the static files in html code  
href =  "{% static '<link_of_file>' %}"

now extending base template such as navbar or head part of the code
create base.html
now after you have created base.html write at the end {% block content %} {% endblock %}
in index.html write {% extends 'base.html' %} {% load static %}{% block content %} and where the code ends {% endblock %}
{% include 'includes/navbar.html' %} - in the base.html you can add different html pages by this method also.
-----------------------------------------------------------------------------------------------------------------------
Category Model -
category.models
class Meta:
        verbose_name = "Category"
        verbose_name_plural = "Categories"
You can add above code to see the desired model name in admin panel otherwise django would have created <Categorys> model.

So a category model has fields like a category name ,category link where when clicked takes you to all the items,some descriptions ,categoryimage
in admin.py file i made a class CategoryAdmin which helps keep the slug name same as category name . and also list_diaplay to show fields on admin panel
---------------------------------------------------------------------------------------------------------------------------------------
User Model - so instaed of using django inbuilt user model we are using custom model using AbstractBaseUser , BaseUserManager
normalize_email = if email entered in capital letters it will turn lowercase.
in models.py there is a field USERNAME_FIELD - this is the field that is used for authentication for username.
so we created a custom user model which uses email as login.This is just copy paste and is better that you instead of remembering just copy paste it
settings.py file (AUTH_USER_MODEL = "accounts.Account")
in admin.py file we added fields that we need to display in admin panel and also hashed the password using UserAdmin 
if we want to use both email and phone number as username .then we will have to change the django  authentication mechanism.
https://docs.djangoproject.com/en/4.1/topics/auth/customizing/ - A full example - see here official documentation
once the model is created then create a superuser to login into admin page
-----------------------------------------------------------------------------------------------------------------------------------------------
store app - created and Product Model created in this
variables = product_name ,slug , description , price , images , stock , is_available , category , created_date , modified_date
the objective of creatimg media_root is the image is stored in that folder but the link to the image is stored in database.
--------------------------------------------------------------------------------------------------------------------------
now we can display selective products by category type
def store(request,category_slug = None):
    categories = None
    products = None
    if category_slug != None:
        categories = get_object_or_404(Category , slug=category_slug)
        print(categories)
        products = Product.objects.filter(category= categories, is_available= True)
    else:
        products = Product.objects.all().filter(is_available = True)
    
    context = {
        'products':products,
    }
    return render(request , 'store/store.html' , context)
-------------------------------------------------------------------------------------------------------------------------------------------
python function called context processor - global data that can be used anywhere through our website
let us supose you created context_processors.py file and now add it to settings--> templates--->options--->"category.context_processors.menu_links"
this will make the links returned by the function global through our website - 
in the above case i used context_processors to make all the categories visible

from django.urls import reverse this is used to return link from urls.py 
syntax -
reverse('name_of_path_defined_in_urls.py' , args=[]) - it will return back the link to the page.
so if you want to get urls to different pages without hardcoding them ,then you can use reverse method to get urls and feed them to href tags 
-----------------------------------------------------------------------------------------------------------------------------------------------------
single_product = Product.objects.get(category__slug = ctegory_slug) - Here double underscore is a method of query that is used -Here Product model is
linked to Category Model by foreign key with category variable .
href = "{% url 'name_of_url_in_urls.py' %}"

--------------------------------------------------------------------------------------------------------------------------------------------
Uploading everything to git
created a new repository on guthub.com after signing up
code written on github wesbite about what to do next.
----------------------------------------------------------------------------------------------------------------------------------------------------
cart app -for handling items in cart
 we have created two models under here cart and cartItem
cart has variables -cartid and date_added
CartItem has product as foreignKey , cart , quantity , is_active status
session keys - keys unique to each user that will act as cart id - (request.session.session_key - to obtain key of already existing seesion) , 
request.sesion.create() - to create a new session key
{% if single_product.stock <= 0 %}
<some condition>
{% else %}
<some condition>
{% endif %}
{% if not cart_item %}
h2>your cart is empty
{% else %}

Now basic idea here is instead of button tags we use anchor tags and when that anchor tag designed as button is clicked then it redirects you to the page
desired with he modification yo want to be done mentioned in the views.py file -

if a item is already in cart then instead of add to cart changed to added to cart and button non clickable .in store.views i ran filter on CartItem and
checked the item i am viewing is alrady in cart or not and then fed it to context and by using if else changed the button
-----------------------------------------------------------------------------------------------------------------------------------------
pagination and search functionality.

paginator = Paginator(products,3)
        page = request.GET.get('page')
        paged_products = paginator.get_page(page)

{% if products.has_other_pages %} - checks if other pages are there
{%  if products.has_previous %} - if there is a previous page
{% for i in products.paginator.page_range %} - gives the number of pages formed
{% if products.number == i %} - gives the current set of products page number
href="?page={{products.next_page_number}} - gives next page number from current page
href="?page={{products.previous_page_number}} - gives previous page number from current page
{% if products.has_next %} - checks of there is a next page

Search functionality-
create a form with method get and then give a name to input field 
def search(request):
    if 'keyword' in request.GET:
        keyword = request.GET['keyword']
        if keyword:
            products = Product.objects.order_by('-created_date').filter(Q(description__icontains= keyword) | Q(product_name__icontains = keyword))
            count = products.count()
        context  = {
            'products':products,
            'count':count,
        }
    return render (request , "store/store.html" , context )
basic workflow is a form is created of get type that has action which redirect you to a url in urls.py and which is linked to some function in views.py file.
the function returns some context submitted to the page and that page is diplayed by that view .
----------------------------------------------------------------------------------------------------------------------------------------------
suppose two models are connected by ForeignKey let be Cart and Product
product = Cart.objects.filter(Product__product_price = 50 , slug=self.slug) - so here we used '__' after model name and accessed its fields
{% if 'search' in request.path %} - to check for some keyword in url
----------------------------------------------------------------------------------------------------------------------------------------------
Variation Model - so different products can vary on basis of there color , size and other properties.
fields- product model, variation Category - like size color etc , variation value - like green red ,small large , is_active  -if some variation not in stock
then the product can be turned off. 

in admin page if you want to make something editable from the outside itself then you can create a <list_editable> tupple having the name of the fields such
as is_active
in admin_page you can also add filters to sort your products by adding <list_filter> field .Add the paramters on which the variations are filterable.

products = Product.objects.order_by('-created_date').filter(Q(description__icontains= keyword) | Q(product_name__icontains = keyword)) - A new type of database 
query that can be used to create 'or' conditions.

{% for i in single_product.variation_set.all %} - product_detail.html
suppose you have two models linked by a foreign key (ex - Product Model has Cart model as foreign key) - now in some html code you have context as items from
Cart model and you want details of Product models you can do a reverse lookup using cart.product_set.all - cart is model you have fed as context .product is 
the model you want details from which has Foreign key linkage >write the name in lower case and _set.all to fetch values of that model.

if you have product variation based on size and color and you have fed choices in database then if you want to show different variation category on page

class VariationManager(models.Manager):
    def colors(self):
        return super(VariationManager , self).filter(variation_category = 'color' , is_active =True)
    def sizes(self):
        return super(VariationManager , self).filter(variation_category = 'size' , is_active =True)
class Variation Manger is important to create as 

class Variation(models.Model):
    product = models.ForeignKey(Product , on_delete=models.CASCADE)
    variation_category = models.CharField(max_length=100 , choices=variation_category_choice)
    variation_value = models.CharField(max_length =100)
    is_active = models.BooleanField(default=True)
    created_date = models.DateTimeField(auto_now=True)
    objects = VariationManager() #Here this line makes objects a Variation Manager class and can use its functions  -
{% for i in single_product.variation_set.colors %} , {% for i in single_product.variation_set.sizes %}

    def __str__(self):
        return self.product.product_name

-------------------------------------------------------------------------------------------------
to add variations to the cart we created a new Manyto Many field in cartItems Class in cart models.py because one cart item
can have many variations and for 1 variation there could be many products .
now we had already appended variations using request.POST method 
if request.method == 'POST':
        for item in request.POST:
            key = item #We have used a for loop here because product can have many type of variations such as size,color ,brand , fabric type 
            value = request.POST[key]
            # print(key , value)
            try:
                
                variation = Variation.objects.get(product = product , variation_category__iexact = key , variation_value__iexact = value)
                product_variation.append(variation)

now using .add method we added the user chosen variation to cart item 
now in html by accessing the model using .all and then iterating over the variations chosen we displayed it on cart.html page.
{% if item.variation.all %}
						{% for var in item.variation.all %}
							{{var.variation_category | capfirst}}: {{var.variation_value | capfirst}} <br>
						{% endfor %}
{% endif %}

Now if for one product there are two variations eg 1 shoe of two different sizes .they must be shown seperately in cart
logoc is 
1- check product is in cart or not
2 -see what variation product is in the cart
3 - see what is the new chosen variation.
4 -see if the new chosen already exists and if exists then simply increase the quantity by 1 [using cart item id] else add the product with new variation
Now to  remove items from the cart 
fetch the cart_Item id and feed it to remove_cart function beecause different product variation will have different id
see section 13 of the course for quick refresher beacuse i have written a lot of custom code because sir code sometimes didnot work
all(elem in list2 for elem in list1) - this checks that list 1 eleemts are present in list 2 in any order
---------------------------------------------------------------------------------------------------------------------------------------------------
Making user registration page in your website - raghav@gmail.com Upper#india
we use django model forms-
create a forms.py file in the same directory
from django import forms
class RegisterForm(forms.ModelForm):
	class Meta:
        	model = Account - name of the model for which you want to generate fields 
        	fields = ['first_name' , 'last_name' , 'phone_number' , 'email' , 'password'] - which fields you want to generate

feed this to views.py and then diplay on register.html

forms.py - this below code is added if you want to add conditions to form input fields
password = forms.CharField(widget= forms.PasswordInput(attrs={
        'placeholder':'password'
    }))
    confirm_password = forms.CharField(widget= forms.PasswordInput(attrs={
        'placeholder':'Confirm password'
    }))

class Meta:
previous...
def __init__(self , *args , **kwargs):
        super(RegistrationForm , self).__init__(*args ,**kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'
add above code to class meta to add css classes to all fields inside a form if there are many ,yo

self.fields['first_name'].widget.attrs['placeholder'] = "First Name" - you can add this code piece to add placeholders in different form fields

Now in views.py file
def register(request):
if request.method =="POST":
        form = RegistrationForm(request.POST)
        if form.is_valid():
            first_name = form.cleaned_data['first_name']
            last_name = form.cleaned_data['last_name']
            phone_number = form.cleaned_data['phone_number']
            email = form.cleaned_data['email']
            password = form.cleaned_data['password']
            username = email.split("@")[0]
            user = Account.objects.create_user(first_name = first_name ,last_name=last_name , email = email , username =username , password=password)
            user.phone_number = phone_number - this field was not in the create_user method so we can add this field to user details
            user.save()
    else:
        form  = RegistrationForm()


in forms.py -this piece of code is added to check wether password and confirm password match or not 
def clean(self):
        cleaned_data = super(RegistrationForm , self).clean()
        password = cleaned_data.get('password')
        confirm_password = cleaned_data.get('confirm_password')

        if password != confirm_password:
            raise forms.ValidationError("Passwords do not match")

in register.html just at the end add
{{form.email.errors}}    this is a method of raising errors in form with a particlular field .instead of email you could use any field
{{form.non_field_errors}} - this is a method of raisig errors when you have added some check manually like for above where you wanted to check passwords match 
or not.

showing messages in djamgo when new user is created 
create alerts.html and add
{% if messages %}
  <ul class="messages">
    {% for message in messages %}
      <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
    {% endfor %}
  </ul>
{% endif %}

Now in view.py 
messages.success(request , "Registration Successful")

do not forget to import from django.contrib import messages

Logging in user -using auth class imported from django.contrib

def login(request):
    if request.method == "POST":
        email = request.POST['email']
        password = request.POST['password']

        user = auth.authenticate(email = email , password = password) #by default if user is not active you cannot login from login page , 
        if user is not None:  # the user has to activated only then will he be able to login
            auth.login(request,user)
            messages.success(request , "You are now Logged in")
            return redirect("home")
        else:
            messages.error(request , "Invalid Login Credentials")
            return redirect("login")
    
    return render(request , "accounts/login.html")

when a user is loged in the user object is global in the entire website you can use different methods on user like user.id ,user.first_name

How to logout a user
def logout(request):
    auth.logout(request)
    messages.success(request , "You are Logged Out")
    return render(request , "accounts/logout.html")

-----------------------------------------------------------------------------------------------------------------------------------------------
Activating users using activation link
def(register):
continued....
current_site = get_current_site(request)
            main_subject = "Please activate your account"
            message = render_to_string("accounts/account_verification.html" , {
                "user":user,
                'domain':current_site,
                'uid':urlsafe_base64_encode(force_bytes(user.pk)),
                'token': default_token_generator.make_token(user),
            })
            to_email = email
            send_email = EmailMessage(main_subject , message , to=[to_email])
            send_email.send()

these are settings.py changes
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'djangohostingaz@gmail.com'
EMAIL_HOST_PASSWORD = 
EMAIL_USE_TLS = True

account verification.html
{% autoescape off %}
Hi {{user.first_name}}

PLease click on the link below to complete your registration
http://{{domain}}{% url 'activate' uidb64=uid token=token %} - the parameters here are taken from above dictionary

If you think its not you .Kindly Ignore the Mail
{% endautoescape %}


write 
@login_required(login_url="login")- this will redirect the user to login page whenever you want some page to be accessed 
only after login

------------------------------------------------------------------------------------------------------------
now the user if has some cart items before loging in our website then it should go to cart after the user has logged in - this changes we have made in views.py of
accounts
first of all we have made mandatory that a user logsin first before proceeding to checkout
now in the login functionality 
we check cart exists and then is there any item in cart and if so then for each item in cart we assign
item.user = user
item.save()

remember seesion id is unique when user is logged in and when user is not
Updating no of items in cart
if request.user.is_authenticated:
cart_items = CartItem.objects.filter(user = request.user)

so to handle variations along with the above functionality we must first iterate through all products and variations(logged out) and check 
wether these variations exist in logged in user cart or not.if there are then we simply increase the quantity else we add the new product with its variation to the logged in user cart.
This has been done in accounts/views.py

Now we wnat user to be redirected to home page if he signs in normally and if he clicks on checkout while logged out then after signin to be sent to checkout page.
for this purpose i added <int> to to the url pattern such that whnever accounts/login/65 is the url the user is directed to home page and else to checkout page.i replicated login.html and
created login1.html such that if address other tahn accounts/login/65 is received it sends to login1.html which gives argument so that user is directed to checkout page 

if auth.autenticate(email = email, password = password) - if the credentials do not match then it returns a None
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
orders app - it contains three models payment , order ,order_product
now earlier we used to do
new = order.objects.create(field_name = this ,field_name =that)
new.save()

We can also do 

new = Order()
now new has become the model itself
new.field_name = this
new.field_name = that
new.save()

to generate order number we imported
from datettime import datetime
now = datetime.now()
            current_date = (now.strftime(r"%Y%m%d"))
            order_number = current_date + str(data.id)
 then we created payments.html to show the final order details payment method and billing address

Above we hace created 3 classes in models.py - one is to collect adrress details and other Payment to collect payment details then there is OrderProduct to gather data from the above two classes 
sand save it to one place so that order processing becomes easy
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
paypal integration

sandbox account

with the help of this article i integrated paypal accounts into my website.
first create sandbox accounts 1 business and 1 personal
copy the buttons code into html file for me is payments.html file , base.html ,settings
then make a new business app and link it to business paypal account
then copy the client id into the javascript link on the base.html tag and you must be good to go
https://lo-victoria.com/how-to-integrate-paypal-smart-buttons-to-your-web-apps - good link for integration.
---------------------------------------------------------------------------------------------------------------------------------------------
Handling After order Functionalities
if i want to show one model below another model in admin panel then i can do this by using admin.TabularInline

class OrderProductInline(admin.TabularInline):
    model = OrderProduct
    extra =0 
    readonly_fields = ('payment' , 'user' , 'product' , 'quantity' , 'product_price' , 'ordered') # this will show the fields as read only fields

# now add above model to below model inlines 
class OrderAdmin(admin.ModelAdmin):
    list_display = ['order_number','full_name'  , "phone" ,'email' , 'city' , 'order_total' , 'tax', 'status' , 'is_ordered' , 'created_at']
    list_filter = ['status' , 'is_ordered'] 
    search_fields = ['order_number' , 'first_name' , 'last_name' , 'phone' , 'email']
    list_per_page = 20
    inlines = [OrderProductInline]
# code for handling once the payment is done - first in javascript we created a datasending json function and then using 'json' library in python we handled the data
and saved it to database
def payments(request):
    body = json.loads(request.body)
    # print(body)
    # Storing Transaction detail inside payment model
    order = Order.objects.get(user = request.user , is_ordered = False , order_number = body['orderID'])
    payment = Payment(
        user = request.user,
        payment_id = body["transID"],
        payment_method = body['payment_method'],
        amount_paid = order.order_total,
        status = body['status'],
    )
    payment.save()
    order.payment = payment
    order.is_ordered = True
    order.save()

    #code here is a bit ambigious 
    #Move the cart item to order Product Table
    cart_items = CartItem.objects.filter(user = request.user)
    
    for item in cart_items:
        orderproduct = OrderProduct()
        orderproduct.order_id = order.id
        # print(order.id)
        orderproduct.payment = payment
        orderproduct.user_id = request.user.id
        orderproduct.product_id = item.product_id
        # print(item.product_id)
        orderproduct.quantity = item.quantity
        orderproduct.productPrice = item.product.price
        orderproduct.ordered = True
        orderproduct.save()

----------------------------------------------------------------------------------------------------------------------------
My account Functionalities
So now we will add functionality to the dashboard
dashboard opens when user is logged in so 
@login_required(login_url = "accounts/dashboard.html")
def dashboard(request):
continued ... in accounts/views.py file

AFTER THAT we have configured the dasboard to show total orders the user has placed and its details
we can also use if conditopn on html classes of an element

the above anchor tags become active i fthe url contains the mentioned path
<a class="list-group-item  {% if '/accounts/dashboard' in request.path %} active {% endif %}" href="{% url 'dashboard' %}"> Dashboard </a>
<a class="list-group-item  {% if '/accounts/my_orders' in request.path %} active {% endif %}" href="{% url 'my_orders' %}"> My Orders </a>


Now i created a UserProfile model to add user profile
in accouts/admin.py
from django.utils.html import format_html
class UserProfileAdmin(admin.ModelAdmin):
    # the below code will help us to display user profile image in the admin panel
    def thumbnail(self , object):
        return format_html("<img src='{}' , width='30' style='border-radius:50%;'>".format(object.profile_picture.url))
    thumbnail.short_description  = "Profile Picture"
    list_display = ('thumbnail' , 'user' , 'city' , 'state')

Now if the user wants to edit his profile from dashboard -
create a raw form with alignment according to grid system or howsover you want the fields to display on the webpage.
then create a UserProfile model where all the profile deatails are stored then we can create modelform on this

accounts/models.py
class UserProfile(models.Model):
    user = models.OneToOneField(Account , on_delete=models.CASCADE)
    address_line1 = models.CharField(blank=True , max_length=200)
    address_line2 = models.CharField(blank=True , max_length=100)
    profile_picture = models.ImageField(blank=True,upload_to='userprofile')
    city = models.CharField(blank=True , max_length=20)
    state = models.CharField(blank=True , max_length=20)
    country = models.CharField(blank=True , max_length=20 , default="INDIA")

    def __str__(self):
        return self.user.first_name
    
    def full_address(self):
        return f'{self.address_line1} {self.address_line2}'


accounts/forms.py
class UserEditForm(forms.ModelForm):
    class Meta:
        model = Account
        fields = ['first_name' , 'last_name' , 'phone_number']
    def __init__(self , *args , **kwargs):
        super(UserEditForm , self).__init__(*args ,**kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'

class UserDetailForm(forms.ModelForm):
    profile_picture = forms.ImageField(required=False , error_messages={"invalid":("image files only")} , widget = forms.FileInput) - 
#this line is added so that it is not mandatory to be added in order to submit the form and error message
    class Meta:
        model = UserProfile
        fields = ['address_line1' , "address_line2" , 'city' , 'state' , 'profile_picture' , 'country']
    def __init__(self , *args , **kwargs): #To add class form-control to all input fields
        super(UserDetailForm , self).__init__(*args ,**kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


templates/editprofile.html
			<form action="{% url 'edit_profile' %}" method="POST" enctype="multipart/form-data"> # here enctype has to be added because form has a file input
				<div class="row mb-2">
                                    <div class="col-md-6">
                                        <label for="" class="form-label">First Name</label>
                                        {{user_edit_form.first_name}} # in this way we can add model form input fields to html page
                                    </div>
                                    <div class="col-md-6">
                                        <label for="" class="form-label">Last Name</label>
                                        {{user_edit_form.last_name}}
                                    </div>


accounts/views.py
def edit_profile(request):
    userprofile = get_object_or_404(UserProfile , user=request.user)
    if request.method == 'POST':
        user_edit_form = UserEditForm(request.POST , instance = request.user) #using django model form we called the form from forms.py
	# added the user instance so that fields are prepopulated from existing user model on html page
        user_detail_form = UserDetailForm(request.POST , request.FILES ,instance=userprofile) #similar as above and request.FILES because this expects files input
        if user_edit_form.is_valid() and user_detail_form.is_valid():
            user_edit_form.save()
            user_detail_form.save()
            messages.success(request , "Your Profile has been updated")
            return redirect('edit_profile')
    else:
        user_edit_form= UserEditForm(instance= request.user)
        user_detail_form = UserDetailForm(instance=userprofile)
        context={
            "user_edit_form":user_edit_form,
            "user_detail_form" :user_detail_form,
            "userprofile":userprofile
        }

    return render(request , 'accounts/edit_profile.html' , context )


Creating User Profile automatically when new user signs up

accounts/views.py
def register(request):
continued..
profile = UserProfile()
            profile.user_id =  user.id - making the  UserProfile user_id field equal to user.id 
            profile.profile_picture = 'default/default-user.png' #in media create a folder named default and add the default-user.png 
            profile.save()


TO set default time zone of india for order creation date and time
settings.py
TIME_ZONE = "Asia/Kolkata"

Suppose you have used tabular inline feature of djnago to show one model below another and now you want to show some image in that model on the admin panel
you have to downlaod pip install django-admin-thumbnails 
in admin.py import admin_thumbnails

@admin_thumbnails.thumbnail('image') #name of the image field in your model-add this decorator above the class
class ProductGalleryInline(admin.TabularInline):
    model = ProductGallery
    extra =1





































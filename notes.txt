installed git created user and email of git
git config --global user.name "John Doe" - Nitish
git config --global user.email johndoe@example.com - rockybranilla@gmail.com

created a virtual environement named env
env\Scripts\activate - to activate the virtual environment

started a new project ludhianaKoti

now in seetings.py there is TEMPLATES dictionary here you can specify from where you want to load templates .

now static files such as images javascript ,css files copied into static folder and then in settings.py
STATIC_ROOT = BASE_DIR /'static'
STATICFILES_DIRS = ['ludhianaKoti/static',]

now in cmd run python manage.py collectstatic - this will create a similar folder static with all the files and one admin folder

now you can use all the static files in html code  
href =  "{% static '<link_of_file>' %}"

now extending base template such as navbar or head part of the code
create base.html
now after you have created base.html write at the end {% block content %} {% endblock %}
in index.html write {% extends 'base.html' %} {% load static %}{% block content %} and where the code ends {% endblock %}
{% include 'includes/navbar.html' %} - in the base.html you can add different html pages by this method also.
-----------------------------------------------------------------------------------------------------------------------
Category Model -
class Meta:
        verbose_name = "Category"
        verbose_name_plural = "Categories"
You can add above code to see the desired model name in admin panel otherwise django would have created <Categorys> model.

So a category model has fields like a category name ,category link where when clicked takes you to all the items,some descriptions ,categoryimage
in admin.py file i made a class CategoryAdmin which helps keep the slug name same as category name . and also list_diaplay to show fields on admin panel
---------------------------------------------------------------------------------------------------------------------------------------
User Model - so instaed of using django inbuilt user model we are using custom model using AbstractBaseUser , BaseUserManager
normalize_email = if email entered in capital letters it will turn lowercase.
so we created a custom user model which uses email as login.This is just copy paste and is better that you instead of remembering just copy paste it
settings.py file (AUTH_USER_MODEL = "accounts.Account")
in admin.py file we added fields that we need to display in admin panel and also hashed the password using UserAdmin 
https://docs.djangoproject.com/en/4.1/topics/auth/customizing/ - A full example - see here official documentation
-----------------------------------------------------------------------------------------------------------------------------------------------
store app - created and Product Model created in this
variables = product_name ,slug , description , price , images , stock , is_available , category , created_date , modified_date
the objective of creatimg media_root is the image is stored in that folder but the link to the image is stored in database.
--------------------------------------------------------------------------------------------------------------------------
now we can display selective products by category type
def store(request,category_slug = None):
    categories = None
    products = None
    if category_slug != None:
        categories = get_object_or_404(Category , slug=category_slug)
        print(categories)
        products = Product.objects.filter(category= categories, is_available= True)
    else:
        products = Product.objects.all().filter(is_available = True)
    
    context = {
        'products':products,
    }
    return render(request , 'store/store.html' , context)
-------------------------------------------------------------------------------------------------------------------------------------------
python function called context processor - global data that can be used anywhere through our website
let us supose you created context_processors.py file and now add it to settings--> templates--->options--->"category.context_processors.menu_links"
this will make the links returned by the function global through our website - 
in the above case i used context_processors to make all the categories visible

from django.urls import reverse this is used to return link from urls.py 
syntax -
reverse('name_of_path_defined_in_urls.py' , args=[]) - it will return back the link to the page.
so if you want to get urls to different pages without hardcoding them ,then you can use reverse method to get urls and feed them to href tags 
-----------------------------------------------------------------------------------------------------------------------------------------------------
single_product = Product.objects.get(category__slug = ctegory_slug) - Here double underscore is a method of query that is used -Here Product model is
linked to Category Model by foreign key with category variable .
href = "{% url 'name_of_url_in_urls.py' %}"

































